<?php
// $Id$

/**
 * @file
 * Enables users to create albums of liveandtell images.
 *
 * When enabled, the Drupal lnt_albums module allows users
 * to create and edit albums of liveandtell images.
 */
 
/**
 * Implementation of hook_nodeapi().
 */
function lnt_albums_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

  if ($node->type == 'lnt_album') {
    switch($op) {

      //
      // ON UPDATE LIVE-AND-TELL ALBUM
      //

      case 'update':

        /*
        // COMMENTED OUT BECAUSE: DO NOT UPDATE IMAGE STATUS WITH ALBUM STATUS
        $rset = db_query(
          "select c.nid "
          ."from {content_type_lnt_image} c, {node} n "
          ."where c.nid = n.nid and c.field_lnt_album_noderef_nid = %d "
          ." and n.type = 'lnt_image' ",
          $node->nid
        );
        while($row = db_fetch_object($rset)) {
          $target_node = node_load($row->nid);
          $target_node->status = $node->status;
          node_validate($target_node);
          node_save($target_node);
        }
        */

      break;

      //
      // ON VIEW LIVE-AND-TELL ALBUM
      //

      case 'view':

        $is_teaser = $a3;
        $is_solitary_page = $a4;

        if ($is_teaser == true) {
          break;
        }

        // SHOW "ADD PICTURE" LINK THAT REFERENCES THIS ALBUM
        if (node_access('update', $node)) {
          $node->content['button_field'] = array(
            '#type' => 'fieldset',
            '#collabsible' => false,
            '#collapsed' => false
          );
          
          /*
          $node->content['button_field'][] = array(
            '#value' => theme('item_list', array(
              l('Add a picture', 'node/add/lnt-image/'.$node->nid.'?destination='.$_GET['q']),
              l(  ($node->status == 0 ? 'Publish this album' : 'Make this album private') , 'publish_album/'.$node->nid.'?destination='.$_GET['q'])
            ))
          );
          */
          
          
        }

        // SHOW ALBUM IMAGES
        //$album_pictures = views_embed_view('lnt_album_images', 'default', $node->nid);
        $album_pictures = views_embed_view('lnt_album_images_flash', 'default', $node->nid);

        /*
        // SHOW ALBUM TERMS
        $rset = db_query(
          "select * "
          ."from {content_type_lnt_image} c, {content_type_lnt_term} t, {node} n "
          ."where t.nid = n.nid and t.field_lnt_image_noderef_nid = c.nid and c.field_lnt_album_noderef_nid = %d "
          ."order by n.title asc ",
          $node->nid
        );

        while($row = db_fetch_object($rset)) {
          //drupal_set_message('<pre>'.print_r($row->title,true).'</pre.');
          $my_table[] = array(
            'data' => array($row->title)
          );
        }
        if (count($my_table) < 1) {
          $my_table[] = array(
            'data' => array('(none)')
          );
        }
        $term_table = theme_table(array('Terms/Phrases'), $my_table);
        */

        // CONSTRUCT PAGE TABLE
        //$page_table[] = array('data' => array($term_table, $album_pictures), 'valign'=>'top');
        //$content .= theme_table(null, $page_table);
        $node->content[] = array(
          '#value' => $album_pictures,
          '#weight' => 5
        );

      break;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function lnt_albums_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'lnt_album_node_form') {
    $form['#validate'][] = 'lnt_albums_handle_validate';
  }
}

/**
 * Handles validation for lnt_album_node_form forms.
 */
function lnt_albums_handle_validate(&$form, &$form_state) {
  //Adding Image
  //  Values:Field...:Status 0
  //  Values:Field...:Filesize N
  //  Clicked:#Post:Field...:Fid NNN
  if (isset($form_state['values']['field_lnt_album_image'][0]['status']) 
      && $form_state['values']['field_lnt_album_image'][0]['status'] == 0
      && $form_state['values']['field_lnt_album_image'][0]['filesize'] != 0
  ) {
    $form_state['values']['field_lnt_album_cover_last_op'][0]['value'] = 'upload';
  }
}

/**
 * Implementation of hook_menu().
 */
function lnt_albums_menu() {
  // ORDER IMAGES TAB
  $items['node/%node/sort-images'] = array(
    'title' => 'Sort images',
    'page callback' => 'lnt_order_images_page',
    'page arguments' => array(1),
    'access callback' => 'lnt_node_access_and_type',
    'access arguments' => array('update', 1, 'lnt_album'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0
  );
  $items['publish_album/%node'] = array(
    'title' => 'Order images',
    'page callback' => 'lnt_toggle_publish_album_page',
    'page arguments' => array(1),
    'access callback' => 'lnt_node_access_and_type',
    'access arguments' => array('update', 1, 'lnt_album'),
    'type' => MENU_CALLBACK,
    'weight' => 0
  );
  return $items;
}

/**
 * Accepts a node object. Toggles publish status and
 * redirects users to that node.
 *
 * @param $node
 *  A node object.
 */
function lnt_toggle_publish_album_page($node) {
  $node->status = 1 - $node->status;
  node_save($node);
  drupal_goto('node/'.$node->nid);
}

/**
 * Returns the lnt_order_images_form form.
 *
 * @return
 *  A lnt_order_images_form form is returned.
 */
function lnt_order_images_page($node) { 
  return drupal_get_form('lnt_order_images_form', $node); 
}

/**
 * Implementation of hook_theme().
 */
function lnt_albums_theme() {
  return array(
    'lnt_order_images_form' => array(
      'arguments' => array('form' => null)
    )
  );
}

/**
 * Theme function for lnt_order_images_form forms.
 */
function theme_lnt_order_images_form($form, $node = null) {

  if (!$form['rows']) {
    $content = '<p>There are no pictures to sort.</p>';
    $content .= '<p>'.l('Click here to add a picture', 'node/add/lnt-image/'.arg(1).'&destination=node/'.arg(1).'/sort-images').'</p>';
    return $content;
  }
  
  //lnt_verbose('theme_lnt_order_images_form');
  drupal_add_tabledrag('image-table', 'order', 'sibling', 'weight');

  foreach ($form['rows'] as $field_id => $field) {
    if (intval($field_id) == false) { continue; } //make sure FIELD_ID is NID

    //lnt_verbose($field,true);
    $row = array();

    $row[] = drupal_render($form['rows'][$field_id]['img']);                     // image
    $row[] = drupal_render($form['rows'][$field_id]['title']);                   // title
    $row[] = drupal_render($form['rows'][$field_id]['is_published-'.$field_id]); // is_published
    $row[] = drupal_render($form['rows'][$field_id]['weight-'.$field_id]);       // weight

    //lnt_verbose($row, true);
    $table[] = array('data' => $row, 'class' => 'draggable');
  }

  $header = array('Image', 'Title', 'Published', 'Weight');
  $output = theme('table', $header, $table, array('id' => 'image-table'));
  $output .= drupal_render($form);
  return $output;

}

/**
 * Accepts a form state and a node object.
 *
 * @param $form_state
 *  The state of the form.
 *
 * @param $node
 *  A node object.
 *
 * @return
 *  Returns a fully rendered lnt_order_images_form form
 */
function lnt_order_images_form(&$form_state, $node = null) {

  //lnt_verbose('lnt_order_images_form');
  //lnt_verbose($node, true);

  // LNT_IMAGE.NID, LNT_IMAGE.TITLE, LNT_IMAGE.WEIGHT
  $rset = db_query(
    "select n.nid, n.title, w.field_weight_value as weight "
    ."from {node} n, {content_type_lnt_image} t, {content_field_weight} w "
    ."where n.nid = w.nid and n.nid = t.nid "
    ." and n.type = 'lnt_image' and t.field_lnt_album_noderef_nid = %d "
    ."order by weight, n.created, n.title ",
    $node->nid
  );

  //lnt_verbose($node, true);
  //lnt_verbose($rset->num_rows, true);

  while($row = db_fetch_object($rset)) {

    //lnt_verbose($row, true);

    //
    // Prepare Form data
    //

    // Image
    $imgnode = node_load($row->nid);
    $img_filepath = $imgnode->field_lnt_image[0]['filepath'];
    $img_filename = lnt_strip_image_path($img_filepath);
    
    /**
     * This is the 'old' get_image_url way, before dynamicscale module.
     * $img_filepath = lnt_get_image_url($img_filename, 'lnt_image', 'lnt_image_tiny_thumb');
     * Now we just send the width and height we want, rather than an imagecache preset name.
     * The 'lnt_image_tiny_thumb' preset was a width of 64 pixels, and a height
     * of 0 pixels (height will scale).
     */
    $img_filepath = lnt_get_image_url($img_filename, '64', '0', 'lnt_image');
    
    $img_html = '<img src="'.$img_filepath.'" />';
    $form['rows'][$row->nid]['img'] = array(
      '#value' => $img_html 
    );

    // Title
    $form['rows'][$row->nid]['title'] = array(
      '#value' => $row->title
    );

    // Publish settings
    $form['rows'][$row->nid]['is_published-'.$row->nid] = array(
      '#type' => 'checkbox',
      '#default_value' => $imgnode->status
    );

    // Weight
    $row_weight = is_null($row->weight) ? 0 : $row->weight;
    $form['rows'][$row->nid]['weight-'.$row->nid] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#default_value' => $row_weight,
      '#attributes' => array('class' => 'weight')
    );

  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );

return $form;

}

/**
 * Handles submition of lnt_order_images_form forms.
 */
function lnt_order_images_form_submit(&$form, &$form_state) {
  //lnt_verbose('lnt_order_images_form_submit');
  //lnt_verbose($form_state['values'],true);
  foreach($form_state['values'] as $key => $value) {
    $key = explode('-', $key);

    // Update weights
    if (count($key) == 2 && $key[0] == 'weight' && intval($key[1])) {
      //lnt_verbose("weight of $key[1]: $value");
      $nid = $key[1];
      $weight = $value;
      //lnt_verbose("$nid $weight");
      $rset = db_query(
        "update {content_field_weight} w "
        ."set w.field_weight_value = %d "
        ."where w.nid = %d ",
        $weight, $nid
      );
    }

    // Update publish settings
    if (count($key) == 2 && $key[0] == 'is_published' && intval($key[1])) {
      $nid = $key[1];
      $is_published = $value;
      $node = node_load($nid);
      if ($node->status != $is_published) {
        $node->status = $is_published;
        node_save($node);
      }
    }
  }
}
