<?php 

function latimage_init() {
  
  $path = drupal_get_path('module', 'latimage');
  
  drupal_add_js("$path/latimage-toolbar.js");
  
  if ($_REQUEST['q'] == 'lat/image/upload') {
    drupal_add_css("$path/css/image-upload.css");
  }

  // Remote image search:
  // To put this in it's own hook_preprocess_page,
  // then a separate module would need to be created.
  if (arg(0) == 'remote-image-search') {
    drupal_add_css("$path/remote-image-search/css/websearch-results.css");
    drupal_add_js ("$path/remote-image-search/js/functions.js");
    drupal_add_js ("$path/remote-image-search/js/driver.js");
  }
  //  Something to consider:
  //  drupal_add_js ("$path/image-search-remote/js/jquery-1.5.1.min.js");
  //  var latJQ = $.noConflict(true); 
  //  latJQ('#selection').function();
  //  alert(jQuery.fn.jquery);
}

function latimage_websearchform(&$form_state) {
  $form = array();

  // Initialize the state, if it doesn't exist.
  if (empty($form_state['storage']['state'])) {
    $state = 'display_form';
    $form_state['storage']['state'] = $state;
  }
  else {
    $state = $form_state['storage']['state'];
  }

  // Display submission form
  if ($state == 'display_form' || $state == 'display_results') {
    $form['search-form'] = array(
      '#prefix' => '<div class="image-search-form">',
      '#suffix' => '</div>',
    );
    $form['search-form']['tags'] = array(
      '#type' => 'textfield',
      '#title' => 'Flickr Public Feed',
    );
    $form['search-form']['submit-keywords'] = array(
      '#type' => 'submit',
      '#value' => 'Search',
    );
  }

  // Display results
  if ($state == 'display_results') {
    if (isset($form_state['values']['tags'])) {
      $flickr_results = _lat_imagesources_search_flickr($form_state['values']['tags'], 'php_serial');
      $flickr_results = unserialize($flickr_results);
      $flickr_items = $flickr_results['items'];
      if (!empty($flickr_items)) {
        $form_state['storage']['image_data'] = $flickr_items;
        // Generate image checkboxes
        $form['#prefix'] = '<div id="websearch-results">';
        $form['#suffix'] = '</div>';
        foreach ($flickr_items as $image_index => $image_data) {
          $form['images'][]= array(
            '#prefix' => '<div class="ui-widget-content ui-selectable">',
            'image' => array(
              '#type' => 'markup',
              '#value' => theme('image', $image_data['thumb_url'], '', '', array(), FALSE),
            ),
            $image_index => array(
              '#type' => 'checkbox',
            ),
            '#suffix' => '</div>',
          );
        }
        $form['submit-images'] = array(
          '#type' => 'submit',
          '#value' => 'Use these images',
        );
      }
      else {
        $form []= array(
          '#type' => 'markup',
          '#value' => t('Your search did not match any images.'),
        );
      }
    }
    else {
      // Do nothing, tags not available
    }
  }

  // Return form
  return $form;
}

function latimage_websearchform_submit($form, &$form_state) {
  // Adjust the state
  $state = $form_state['storage']['state'];
  $submit_button = $form_state['clicked_button']['#id'];
  if ($submit_button == 'edit-submit-keywords') {
    $state = 'display_results';
  }
  else if ($submit_button == 'edit-submit-images') {
    $state = 'process_results';
  }
  else {
    $state = 'display_form';
  }
  // Process results
  if ($state == 'process_results') {
    // Find chosen images
    $image_data = $form_state['storage']['image_data'];
    $image_mask = array_intersect_key($form_state['values'], $image_data);
    foreach ($image_mask as $index => $display_bit) {
      if ($display_bit == 1) {
        $selected_images []= $image_data[$index];
      }
    }
    // Save the images as a file & "image" node.
    foreach ($selected_images as $image_info) {
      $image_url = $image_info['l_url'];
      $node = _lat_node_initialize('image');
      $node->title = 'image';
      $node->uid = $GLOBALS['user']->uid;
      $node->name = $GLOBALS['user']->name;
      $node->field_image[0]['filefield_remote']['url'] = $image_url;
      $field = content_fields('field_image', 'image');
      filefield_source_remote_value(
        array(
          '#type_name' => 'filefield', 
          '#field_name' => 'field_image',
          '#delta' => 0,
          '#upload_validators' => filefield_widget_upload_validators($field),
        ),
        $node->field_image[0]
      );
      node_save($node);
      
    }
    // Update the state
    $state = 'display_form';
  }
  
  $form_state['storage']['state'] = $state; 
}

/**
 * Implementation of hook_menu().
 */
function latimage_menu() {
  $items = array(
    'lat/process/user/lat-image-create/%/%' => array(
      'title' => 'User Process - Create LAT Image',
      'page callback' => '_latimage_user_process_create',
      'page arguments' => array(4, 5),
      'access arguments' => array('create lnt_image content'),
    ),
    'remote-image-search' => array(
      'title' => 'Search for Pictures to Use',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('latimage_websearchform'),
      'access callback' => true,
      'menu_name' => 'primary-links', 
    ),
    'remote-image-search/results' => array(
      'title' => 'Search for Pictures to Use',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('latimage_websearchresultsform'),
      'access callback' => true,
      'menu_name' => 'primary-links', 
    ),
    'lat/image/upload' => array(
      'title' => 'Upload an image',
      'page callback' => '_latimage_page_upload',
      'page arguments' => array(),
      'access callback' => true,
      'menu_name' => 'primary-links', 
    ),
  );
  /*
  // api/latimage/NID/TERM_NID
  $items['api/latimage/%/%'] = array(
    'title' => 'Open file',
    'page callback' => 'lnt_openfile',
    'access callback' => TRUE, // <-- NEED TO FIGURE THIS OUT!!
    //'access callback' => 'node_access',
    //'access arguments' => array('view', 'lnt_image'),
    'type' => MENU_CALLBACK
  );
  */
  return $items;
}

function _latimage_page_upload() {
  // add module
  module_load_include('inc', 'node', 'node.pages');
  return '<div id="lat-image-upload">'.node_add('image').'</div>';
}

function latimage_theme($existing, $type, $theme, $path) {
  return array(
    'remote_image_search' => array(
      'arguments' => array(),
      'path' => "$path/remote-image-search/theme",
      'file' => 'remote-image-search-theme',
      'template' => 'remote-image-search-page',
      'theme paths' => array(
         "$path/remote-image-search/theme"
       ),
    )
  );
}

function latimage_create($method, $data) {
  // TODO: ALL NODES SHOULD BE MANAGED USING API.
  $tagging = _lat_node_initialize('lnt_image');
  $tagging->uid = $GLOBALS['user']->uid;
  $tagging->status = 0;
  switch($method) {
    case 'image-nid':
    case 'image-node':
      // TODO: ALL IMAGE FILES SHOULD BE ACCESSED USING API.
      $image = node_load($data);
      if ($image) {
        $tagging->field_lnt_image[0] = $image->field_image[0];
        $image_file_fid = $image->field_image[0]['fid'];
        $tagging->title = "Tagging [fid:$image_file_fid]";
        node_save($tagging);
      }
      else {
        // Could not load image
      }
      break;
    case 'latimage-nid':
    case 'lnt_image-node':
    case 'tagged-image-node':
      // TODO: ALL IMAGE FILES SHOULD BE ACCESSED USING API.
      $lnt_image = node_load($data);
      if ($lnt_image) {
        $tagging->field_lnt_image[0] = $lnt_image->field_lnt_image[0];
        $image_file_fid = $lnt_image->field_lnt_image[0]['fid'];
        $tagging->title = "Tagging [fid:$image_file_fid]";
        node_save($tagging);
      }
      else {
        // Could not load image
      }
      break;
    case 'image-fid':
    case 'image-file':
      // TODO: ALL IMAGE FILES SHOULD BE ACCESSED USING API.
      $image_file = field_file_load($data);
      if ($image_file) {
        $tagging->field_lnt_image[0] = $image_file;
        $image_file_fid = $image_file['fid'];
        $tagging->title = "Tagging [fid:$image_file_fid]";
        node_save($tagging);
      }
      else {
        // Could not load image file
      }
      break;
    case 'image-url':
      // TBD
      break;
    default:
      // TBD
      break;
  }
  // Return results
  if (property_exists($tagging, 'nid')) {
    return $tagging;
  }
  else {
    return false;
  }
}

/**
 * LAT Image User Process Create
 * 
 * @param $method
 * @param $data
 */
function _latimage_user_process_create($method, $data) {
  $content = '';
  $tagging = latimage_create($method, $data);
  if ($tagging) {
    drupal_goto("node/$tagging->nid/add-terms");
  }
}

/**
 * Implementation of hook_nodeapi().
 * 
 * TOOLBAR BUTTONS
 *  
 * @param $node
 * @param $op
 * @param $a3
 * @param $a4
 */
function latimage_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'lnt_image' && $op == 'load') {
    switch($op) {
      case 'load':
        $node->toolbar['default'] = array(
          l('More Details', $_GET['q'].'#', array('attributes' => array('class' => 'latimage-toolbar-button latimage-toolbar-button-tags', 'data' => ".toolbar-dropdown-panel-tags"))),
          l('Embed Code', $_GET['q'].'#', array('attributes' => array('class' => 'latimage-toolbar-button latimage-toolbar-button-embed-code', 'data' => ".toolbar-dropdown-panel-embed-code")))
        );
        break;
      case 'view':
        $is_teaser = $a3;
        $is_page = $a4;
        break;
    }
  }
}

function latimage_preprocess_node(&$vars) {
  
  $node = $vars['node'];
  if ($node->type == 'lnt_image') {
    
    // Teaser variables
    if ($vars['teaser']) {
      $img = theme(
        'imagecache',
        'thumbnail_100', 
        $node->field_lnt_image[0]['filepath'], '', '', NULL, FALSE
      );
      $vars['lat_image_thumb'] = l($img, 'node/'.$node->nid, array('html' => true));
      
      // NODE TEASER ISN'T USING THIS.
      //$vars['lat_image_terms'] = views_embed_view('lat_album_image_teaser_terms', 'default', $node->nid);      
      $vars['lat_image_terms'] = '[view: lat_album_image_teaser_terms]';
    }
    
    // Page variables
    elseif ($vars['page']) {
      
      // Remove title on image
      drupal_set_title('');
  
      // Tags variable
      $vars['lat_image_tags'] = views_embed_view('lnt_image_terms', 'default', $node->nid);
      
      // Terms variable 
      //$vars['lat_image_terms'] = views_embed_view('lnt_image_terms', 'default', $node->nid);
      
      //
      // Embed code & Printable embed code
      //
      
      $embed_code = theme('lat_image_viewer_embed_code', $node, 550, 338);
      $vars['lat_image_embed_code'] = "<div class='lnt-image-object'>$embed_code</div>";
      // Printed embed code
      $cp_embed_code = array(
        '#type' => 'fieldset',
        '#attributes' => array('class' => 'lat-image-embed-code'),
        '#title' => '<b>Embed Code</b>',
        '#value' => '<input class="lat-image-embed-code" onclick="this.focus();this.select();" value="'.htmlentities($embed_code).'" />',
        '#collapsible' => false,
        '#collapsed' => false,
        '#weight' => 6
      );
      $vars['lat_image_embed_code_copy'] = drupal_render($cp_embed_code);
      // Printed embed code; boxes hidden
      $embed_code_hide_boxes = theme('lat_image_viewer_embed_code', $node, 550, 338, array('boxes' => 'none'));
      $cp_embed_code_hideboxes = array(
        '#type' => 'fieldset',
        '#attributes' => array('class' => 'lat-image-embed-code hidden-boxes'),
        '#title' => '<b>Embed Code (With Boxes Hidden)</b>',
        '#value' => '<input class="lat-image-embed-code" onclick="this.focus();this.select();" value="'.htmlentities($embed_code_hide_boxes).'" />',
        '#collapsible' => false,
        '#collapsed' => false,
        '#weight' => 7
      );
      $vars['lat_image_embed_code_hideboxes'] = drupal_render($cp_embed_code_hideboxes);
      
      //
      // Previous & Next buttons
      //
      
      // Get entire album
      $lat_image_album_nid = $node->field_lnt_album_noderef[0]['nid'];
      $view = views_get_view('lat_album_images');
      $view->set_arguments(array($lat_image_album_nid));
      $view->execute();
      // Find my position
      foreach ($view->result as $key => $result) {
        if ($result->nid == $node->nid) {
          $lat_image_index = $key;
          break;
        }
      }
      // Previous - If I'm not the first, then show previous
      if ($lat_image_index != 0) {
        $vars['lat_image_album_previous'] = l('Previous', 'node/'.$view->result[$lat_image_index - 1]->nid); 
      }
      // Next - If I'm not the last, then show next
      if ($lat_image_index != count($view->result) - 1) {
        $vars['lat_image_album_next'] = l('Next', 'node/'.$view->result[$lat_image_index + 1]->nid); 
      }
      
    } // end if($is_page)
    
  } // end if($node->type == 'lnt_image')
}
