<?php

// $Id$

/**
 * Implementation of hook_menu()
 */
function bmmnode_menu() {
  $items['get-bmm-xml'] = array(
    'title' => 'Get bmm node activity file',
    'page callback' => '_getxml',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['get-bmm-xml/%'] = array(
    'title' => 'Get bmm node activity file',
    'page callback' => '_getxml',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['node/%node/publish'] = array(
    'title' => 'Publish node (toggle)',
    'page callback' => '_toggle_bmm_status',
    'page arguments' => array(1),
    'access callback' => '_node_access_and_type',
    'access arguments' => array('update', 1, 'bmm'),
    'type' => MENU_CALLBACK,
    'weight' => 0
  );
  
  return $items;
}

/**
 * Implementation of hook_preprocess_node().
 */
function bmmnode_preprocess_node(&$var) {
  if ($var['node']->type == 'bmm') {

    $node = $var['node'];
    $nid = $node->nid;
    $user = $var['user'];
    $account = user_load($var['uid']);
    $font_family = urlencode($account->profile_font_family);
    
    //drupal_set_message('<pre>'.htmlentities(print_r($account,true)).'</pre>');
    
    if (($node->uid == $user->uid && user_access('edit own bmm content')) || user_access('edit any bmm content')) {
      // Set class for toolbar buttons
      $options = array('attributes' => array('class' => 'link-button'));

      // Toolbar
      $toolbar[] = l(t('Edit'), "node/$nid/edit", $options);
      $toolbar[] = l(t($node->status == 1 ? 'Make Private' : 'Publish'), "node/$nid/publish", $options);
      $toolbar[] = l(t('Add Affix'), "node/add/bmm-affix/$nid?destination=/node/$nid", $options);
      $var['bmm_toolbar'] = '<div id="bmm-toolbar" class="toolbar">'.implode(' ', $toolbar).'</div>';
    }
    
    // ANIMATION    
    $url = 'http://liveandtell.com/sites/liveandtell.com/modules/liveandtell/modules/bmmnode/bmmactivity.swf?'
      .'nid='.$nid
      .'&fontFamily='.$font_family;
    $code  = '<object width="400">';
    $code .= '<param name="movie" value="'.$url.'"></param>';
    $code .= '<param name="allowFullScreen" value="true"></param>';
    $code .= '<param name="wmode" value="transparent"></param>';
    $code .= '<embed src="'.$url.'" type="application/x-shockwave-flash" allowfullscreen="true" width="400" wmode="transparent"></embed>';
    $code .= '</object>';
    $var['bmm_animation'] = $code;

    // GAME
    $url = 'http://liveandtell.com/sites/liveandtell.com/modules/liveandtell/modules/bmmnode/bmmgame.swf?'
      .'nid='.$nid
      .'&fontFamily='.$font_family;
    $code  = '<object width="400" height="300">';
    $code .= '<param name="movie" value="'.$url.'"></param>';
    $code .= '<param name="allowFullScreen" value="true"></param>';
    $code .= '<param name="wmode" value="transparent"></param>';
    $code .= '<embed src="'.$url.'" type="application/x-shockwave-flash" allowfullscreen="true" width="400" height="300" wmode="transparent"></embed>';
    $code .= '</object>';
    $var['bmm_game'] = $code;

    // General view of entries
    $var['bmm_affix_table'] = views_embed_view('bmm_affix_list', 'default', $nid);
  }
}

function _toggle_bmm_status($node) {
  $node->status = 1 - $node->status;
  node_save($node);
  drupal_goto('node/'.$node->nid);
}

function _node_access_and_type($op, &$node, $type) {
  return $node->type == $type && node_access($op, $node);
}

function _getxml($nid) {
  drupal_set_header("Content-Type: text/plain; charset=utf8");
  print '<?xml version="1.0" encoding="UTF-8"?>';
  $node = node_load($nid);
  if ($node->nid && $node->type == 'bmm') {
    $base_word = $node->field_mbm_base_word[0]['value'];
    print "\n<bmmactivity baseword='$base_word' success='true'>";
    $view = views_get_view('bmm_affix_list');
    $view->preview('default', array($node->nid));   
    foreach ($view->result as $n) { 
      //print_r($n);
      $affix = htmlentities($n->node_data_field_mbm_affix_field_mbm_affix_value, ENT_QUOTES, 'UTF-8');
      $affix_audio = htmlentities($n->node_data_field_mbm_container_field_mbm_affix_audio_value, ENT_QUOTES, 'UTF-8');
      $final_word = htmlentities($n->node_data_field_mbm_container_field_mbm_final_word_value, ENT_QUOTES, 'UTF-8');
      $final_word_audio = htmlentities($n->node_data_field_mbm_container_field_mbm_final_word_audio_value, ENT_QUOTES, 'UTF-8');
      $translation = htmlentities($n->node_data_field_mbm_container_field_mbm_translation_value, ENT_QUOTES, 'UTF-8');
      $translation_audio = htmlentities($n->node_data_field_mbm_container_field_mbm_translation_audio_value, ENT_QUOTES, 'UTF-8');
      print "\n    <entry "
        . "affix='$affix' affixaudio='$affix_audio' "
        . "finalword='$final_word' finalwordaudio='$final_word_audio' "
        . "translation='$translation' translationaudio='$translation_audio' "
        . "/>";
    }
    print "\n</bmmactivity>";    
  } else {
    print "\n<bmmactivity baseword='' success='false'>";
    print "\n</bmmactivity>";    
  }
  module_invoke_all('exit');
}

/**
 * Implementation of hook_nodeapi().
 */
function bmmnode_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'bmm') {
    switch ($op) {
      case 'view':
        $nid = $node->nid;
        
        //Add affix button
        $node->content['bmmnode_add_entry_button'] = array(
          '#type' => 'button',
          '#attributes' => array('onclick' => "location.href='" . check_url('/node/add/bmm-affix/' . $nid) . "';"),
          '#value' => t('Add Entry'),
          '#weight' => -10,
        );
        
        //List of affixes
        $node->content['bmmnode_entry_list'] = array(
          '#type' => 'markup',
          '#value' => views_embed_view('bmm_affix_list', 'default', $nid),
        );      

        //Publish bmm node button
        $node->content['bmmnode_publish_button'] = array(
          '#type' => 'button',
          '#attributes' => array('onclick' => "location.href='" . check_url('/node/'.$nid.'/publish?destination='.$_GET['q'])."';"),
          '#value' => t($node->status == 0 ? 'Publish' : 'Make private'),
          '#weight' => -9,
        );
      break;
      case 'update':
        $view = views_get_view('bmm_affix_list');
        $view->preview('default', array($node->nid));   
        foreach ($view->result as $n) { 
          $updatenode = node_load($n->nid);
          $updatenode->status = $node->status;
          node_save($updatenode);
        }
      break;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function bmmnode_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'bmm_affix_node_form') {
    if (!isset($form['field_mbm_container'][0]['#default_value']['nid'])) {
      $form['field_mbm_container'][0]['#default_value']['nid'] = arg(3);
    }
    $form['#redirect'] = 'node/' . $form['field_mbm_container'][0]['#default_value']['nid'];
  }
}
