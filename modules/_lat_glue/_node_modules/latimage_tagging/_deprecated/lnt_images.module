<?php
// $Id$

/**
 * @file
 * Manages liveandtell images.
 *
 * When enabled, the Drupal lnt_images module allows a user
 * to add terms to a liveandtell image.
 */
 
/**
 * Implementation of hook_init().
 */
function lnt_images_init() {
  //variable_set("font-lakota", "Lakhota Gmigmeya");
  //variable_set("font-english", "Arial");
}
 
/**
 * Implementation of hook_perm().
 */
function lnt_images_perm() {
    return array('advanced edit lnt_image');
}



function lnt_images_nodeapi_op_presave(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // ON SUBMIT LIVE-AND-TELL IMAGE
  // Apply string replacement to XML field
  $xml_data = $node->field_lnt_image_xml[0]['value'];
  if (is_null($xml_data)) {
    // THIS DEFAULT VALUE IS ONLY A PRECAUTION FOR LEGACY NODES
    // THE DEFAULT XML WILL COME FROM CCK FIELD'S DEFAULT VALUE
    $xml_data = '<controls><image url="@URL" text="@TITLE" /></controls>'; 
  } 
  $xml_imgpath = 'http://' . $GLOBALS['_SERVER']['HTTP_HOST'] . base_path() . file_directory_path(). '/imagecache/lnt_image_fullsize/lnt_image/' . $node->field_lnt_image[0]['filename'];
  $xml_data = str_replace('@TITLE', $node->title, $xml_data);
  $xml_data = str_replace('@URL', $xml_imgpath, $xml_data);
  $node->field_lnt_image_xml[0]['value'] = $xml_data;
}

function lnt_images_nodeapi_op_update(&$node, $op, $a3, $a4) {
  lnt_image_update_terms($node);
}

function lnt_images_nodeapi_op_view_page(&$node, $op, $a3, $a4) {
  // Set breadcrumb
  $album_nid = $node->field_lnt_album_noderef[0]['nid'];
  $album_node = node_load($album_nid);
  $language_term = array_shift(taxonomy_node_get_terms_by_vocabulary($album_node, 1));
  $language_term_lower = drupal_strtolower($language_term->name);
  $breadcrumb[] = l('Home', NULL);
  $breadcrumb[] = l('Picture book', 'picture-book');
  $breadcrumb[] = l($language_term->name, "picture-book/$language_term_lower");
  $breadcrumb[] = l($album_node->title, "node/$album_node->nid");
  $breadcrumb[] = l($node->title, $_REQUEST['q']);
  drupal_set_breadcrumb($breadcrumb);
}


/**
 * Implementation of hook_nodeapi().
 */
function lnt_images_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  
  if ($node->type == 'lnt_image') {
    switch ($op) {
      
      case 'presave':
        // Get a fresh copy of the XML data (to prevent changes)
        // THIS IS TO MAKE UP FOR THE PROBLEM THAT THIS XML DATA
        // SHOULD NOT BE IN THE NODE. IT SHOULD BE MANAGED SEPARATELY
        // FORM THE NODE. SO, WE REFRESH THE COPY.
        //watchdog('latimge', 'Entering PRESAVE.');
        $latimage_path = arg(0).'/'.arg(2).'/'.arg(3); 
        $latimage_path_check = array(
          'node/status/toggle',
          'node/edit/'
        );
        //watchdog('latimage', 'Checking path: '.$latimage_path);
        if (in_array($latimage_path, $latimage_path_check)) {
          //watchdog('latimge', 'Entering XML passthru.');
          if (!is_null($node->field_lnt_image_xml[0]['value'])) {
            $latimage_openfile_url = 'http://'.$_SERVER['HTTP_HOST']."/openfile?nid=$node->nid&format=xml";
            $latimage_openfile_data = lat_curl($latimage_openfile_url);
            //dpm($latimage_openfile_data);
            $node->field_lnt_image_xml[0]['value'] = $latimage_openfile_data;
          }
        }
        lnt_images_nodeapi_op_presave($node, $op, $a3, $a4);
        break;
        
      case 'update':
        lnt_images_nodeapi_op_update($node, $op, $a3, $a4);
        break;
        
      case 'view':
        $teaser = $a3;
        $page = $a4;
        if ($page) {
          lnt_images_nodeapi_op_view_page($node, $op, $a3, $a4);
        }
        else {
          // do nothing
        }
        break;
        
      default:
        // do nothing
        break;
        
    } // end switch
  } // end if
}


/**
 * Implementation of hook_menu().
 */
function lnt_images_menu() {
  
  // ADD TERMS TAB
  $items['node/%node/add-terms'] = array(
    'title' => 'Tag picture',
    'page callback' => 'lnt_image_editor',
    'page arguments' => array(1),
    'access callback' => 'lnt_node_access_and_type',
    'access arguments' => array('update', 1, 'lnt_image'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0
  );

  // ORDER TERMS TAB
  $items['node/%node/sort-terms'] = array(
    'title' => 'Sort terms',
    'page callback' => 'lnt_order_terms_page',
    'page arguments' => array(1),
    'access callback' => 'lnt_node_access_and_type',
    'access arguments' => array('update', 1, 'lnt_image'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0
  );

  // OPEN FILE
  $items['openfile'] = array(
    'title' => 'Open file',
    'page callback' => 'lnt_openfile',
    'access callback' => TRUE, // <-- NEED TO FIGURE THIS OUT!!
    //'access callback' => 'node_access',
    //'access arguments' => array('view', 'lnt_image'),
    'type' => MENU_CALLBACK
  );

  // SAVE FILE
  $items['savefile'] = array(
    'title' => 'Save file',
    'page callback' => 'lnt_savefile',
    'access callback' => TRUE, // <-- NEED TO FIGURE THIS OUT!!
    //'access callback' => 'node_access',
    //'access arguments' => array('update', 'lnt_image'),
    'type' => MENU_CALLBACK
  );

  return $items;

}

/**
 * Implementation of hook_menu_alter().
 */
function lnt_images_menu_alter(&$items) {

//  // Add a "term" tab.
//  // Alter the "node/%nid/edit" menu.
//  $items['node/%node/edit'] = array(
//    'title' => 'Categorize',
//    'page callback' => 'node_page_edit',
//    'page arguments' => array(1),
//    'access callback' => 'lnt_node_access_and_type',
//    'access arguments' => array('update', 1, 'lnt_image'),
//    'type' => MENU_LOCAL_TASK,
//    'weight' => 0
//  );

}


/**
 * Implementation of hook_theme().
 */
function lnt_images_theme($existing, $type, $theme, $path) {
  return array(
    'lnt_order_terms_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'lat_image_viewer_embed_code' => array(
      'arguments' => array('node' => NULL, 'width' => NULL, 'height' => NULL, 'query_string' => NULL),
      'template' => 'latimage-viewer-embed-code',
      'path' => "$path/theme",
      'file' => 'theme.inc',
    ),
    'lat_image_editor_embed_code' => array(
      'arguments' => array('node' => NULL, 'width' => NULL, 'height' => NULL, 'query_string' => NULL),
      'template' => 'latimage-editor-embed-code',
      'path' => "$path/theme",
      'file' => 'theme.inc',
    )
  );
}

/**
 * Imeplementation of hook_preprocess_page
 *
 * Prepend the $head_title theme variable with "term" and "example" text
 * This is more useful information when sharing Web pages on Facebook.
 */
function lnt_images_preprocess_page(&$vars) {

  // Verify page node
  if (!array_key_exists('node', $vars)) {
    return;
  }

  // Initialize node variable
  $node = $vars['node'];  
  
  // Verify 'lnt_image' node
  if ($node->type == 'lnt_image') {

    // Initialize title text variable  
    $title_text = '';
  
    //
    //Retrieve term text
    //
    
    $query_to_retrieve_terms = <<<EOQ
      SELECT 
        node.title AS node_title
      FROM 
        {node} node
        LEFT JOIN {content_type_lnt_term} term ON node.vid = term.vid
        LEFT JOIN {content_field_lnt_image_noderef} fr ON node.vid = fr.vid
      WHERE 
        node.type in ('lnt_term') 
        AND fr.field_lnt_image_noderef_nid = %d
EOQ;
    $record_set = db_query($query_to_retrieve_terms, $node->nid);
    while ($row = db_fetch_object($record_set)) {
      $row_text = trim($row->node_title);
      if ($row_text != '') {
        $title_text .=  "$row_text; ";
      }
    } // while
    
    //
    // Retrieve example sentence text
    //
    
    $query_to_retrieve_examples = <<<EOQ
      SELECT 
        example.field_lnt_image_text_examples_text
      FROM 
        {node} node 
          LEFT JOIN 
        {content_field_lnt_image_text_examples} example 
          ON node.vid = example.vid
      WHERE 
        (node.type in ('lnt_image')) AND (node.nid = %d)
EOQ;
    $record_set = db_query($query_to_retrieve_examples, $node->nid);
    while ($row = db_fetch_object($record_set)) {
      $row_text = trim($row->field_lnt_image_text_examples_text);
      if ($row_text != '') {
        $title_text .=  "$row_text; ";
      }
    } // while    

    //Trim title text    
    $title_text = trim($title_text);

    //
    // Now set the page title
    //
    
    $page_title = $vars['head_title'];
    $page_title_length = strlen($page_title);
    $cutoff_length = 64 - $page_title_length - 5;
    if ($title_text > $cutoff_length) {
      $title_text = substr($title_text, 0, $cutoff_length);
    }
    $vars['head_title'] = $title_text. ' ... ' . $page_title;
    
  } // if
  
} // function


/**
 * Implementation of hook_form_alter.
 */
function lnt_images_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'lnt_image_node_form') {
  
    //drupal_set_message('<pre>'.print_r($form,true).'</pre>');
    $user = $GLOBALS['user'];

    //
    // CREATING or EDITING a node
    //
    //   Preconditions:
    //     User missing "advanced edit lnt_image" permission
    //
    //   Action:
    //     Convert XML textarea to a hidden value
    //

    if (user_access('advanced edit lnt_image', $user) == false) {
      $form['field_lnt_image_xml'][0]['#type'] = 'value';
      $form['field_weight'][0]['#type'] = 'value';
    }

    //
    // EDITING an existing node
    //
    //   Preconditions:
    //     User missing "advanced edit lnt_image" permission
    //     Node was already created, i.e. $form['nid']['#value']
    //
    //   Action:
    //     Remove image "upload" button
    //

    if (user_access('advanced edit lnt_image', $user) == false) {
      if (isset($form['nid']['#value'])) {
        $form['field_lnt_image'][0]['#post_render'] = array('lnt_post_render_lnt_image_node_form');
      }
    }

    //
    // CREATING or EDITING a node for a particular album
    //
    //   Preconditions:
    //     Album is an additional argument, e.g. /node/add/lnt_image/123
    //
    //   Action:
    //     Set default album to the additional argument
    //     i.e. $form['field_lnt_album_noderef']['#default_value'][0]['nid']
    //

    //drupal_set_message(arg(3));
    $album_ref = arg(3);
    if (is_numeric($album_ref)) {
      $form['field_lnt_album_noderef']['#type'] = 'value';
      $form['field_lnt_album_noderef']['#default_value'][0]['nid'] = $album_ref;
    }

  }
}





/**
 * Accepts a form and a node object.
 *
 * @param $form
 *  A form object.
 *
 * @param $node
 *  A node object.
 *
 * @return
 *   A themed ordered list of terms.
 */
function theme_lnt_order_terms_form($form, $node = null) {

  drupal_add_tabledrag('term-table', 'order', 'sibling', 'weight');

  foreach ($form['rows'] as $field_id => $field) {
    if (intval($field_id)) {        //make sure FIELD-ID => NID
      $row = $field['data']['#value'];
      $row[] = drupal_render($form['rows'][$field_id][$field_id]);
      //drupal_set_message('<pre>'.print_r($row,true).'</pre>');
      $rows[] = array('data' => $row, 'class' => 'draggable');
    }
  }

  $header = array('Terms/Phrases', 'Weight');
  $output = theme_table($header, $rows, array('id' => 'term-table'));
  $output .= drupal_render($form);
  return $output;

}

/**
 * Accepts a form state and a node.
 *
 * @param $form_state
 *  The state of the form.
 *
 * @param $node
 *  A node object.
 *
 * @return
 *  A form for ordering terms is returned.
 */
function lnt_order_terms_form(&$form_state, $node = null) {

  //drupal_set_message('<pre>'.print_r($node,true).'</pre>');

  // TERM.NID, TERM.TITLE, TERM.WEIGHT
  $rset = db_query("
    select 
      n.nid, 
      n.title, 
      w.field_weight_value as weight
    from 
      {node} n
      inner join {content_field_weight} w on n.nid = w.nid  
      inner join {content_type_lnt_term} t on n.nid = t.nid
      inner join {content_field_lnt_image_noderef} fr on n.nid = fr.nid 
    where 
      n.type = 'lnt_term' 
      and fr.field_lnt_image_noderef_nid = %d 
    order by
      weight,
      n.title 
    ",
    $node->nid
  );

  while($row = db_fetch_object($rset)) {

    $row_weight = is_null($row->weight) ? 0 : $row->weight;

    $form['rows'][$row->nid]['data'] = array(
      '#type' => 'value',
      '#value' => array($row->title)
    );

    $form['rows'][$row->nid][$row->nid] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#default_value' => $row_weight,
      '#attributes' => array('class' => 'weight')
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );

  return $form;

}

/**
 * The submit handler for the lnt_order_terms_form form.
 */
function lnt_order_terms_form_submit(&$form, &$form_state) {
  //lnt_verbose($form_state, true);
  foreach($form_state['values'] as $nid => $weight) {
    if (intval($nid)) {
      //lnt_verbose("$nid $weight");
      $rset = db_query(
        "update {content_field_weight} w "
        ."set w.field_weight_value = %d "
        ."where w.nid = %d ",
        $weight, $nid
      );
    }
  }
}

/**
 * Accepts a filepath and an imagecache preset.
 *
 * @param $filepath
 *  The path to the image.
 *
 * @param $preset
 *  An imagecache preset
 *
 * @return
 *   An array with the image width and height.
 */
// This could be passed by the "Image" node using nodeapi.
function get_lnt_image_dimensions($filepath, $preset = 'lnt_image_fullsize') {
  $base_path = $GLOBALS['base_path']; 
  $filepath = str_replace('dev.liveandtell.com', 'liveandtell.com', $filepath);
  //$img  = $GLOBALS['_SERVER']['DOCUMENT_ROOT'].'/drupal6/'.$base_path.$filepath;
  $img  = $GLOBALS['_SERVER']['DOCUMENT_ROOT'].'/'.$base_path.$filepath;
  $preset = imagecache_preset_by_name($preset);
  $action = $preset['actions'][0];
  $imgdata = imageapi_image_open($img);
  _imagecache_apply_action($action, $imgdata);
  return array(
  'width' => $imgdata->info['width'], 
  'height' => $imgdata->info['height']
  );
}




/**
 * Accepts the contents of a node.
 *
 * @param $content
 *  The contents of a node object.
 *
 * @return
 *  Returns the content with the additional submit function removed.
 */
function lnt_post_render_lnt_image_node_form($content) {
    $content = preg_replace('/<input type="submit".*?\/>/','',$content);
    return $content;
}

/**
 * Accepts a file path.
 *
 * @param $file_path
 *  A file path.
 *
 * @return
 *  Return a stripped filename.
 */
function lnt_strip_image_path($file_path) {
  $file_path = str_replace('dev.liveandtell.com', 'liveandtell.com', $file_path);
  $filename = str_replace(file_directory_path().'/lnt_image/', '', $file_path);
  return $filename;
}



/**
 * Accepts a filename, a node type, and an imagecache preset
 * @param $filename - The image filename.
 * @param $node_type - The type of node.
 * @param $imagecache_preset - An imagecache preset.
 * @return - A url to the image is returned.
 */
function lnt_get_image_url($filename, $width, $height, $node_type) {
  if ($width || $height) {
    // Dynamically created preset
    $preset = "/dynamicscale/$width/$height/";
  }
  else {
    $preset = "/imagecache/lnt_image_fullsize/";
  }

  return 'http://' . $GLOBALS['_SERVER']['HTTP_HOST'] . 
                     base_path() .
                     file_directory_path() .
                     $preset .
                     $node_type . '/' .
                     $filename;
}




/**
 * Accepts a node reference.
 *
 * @param $node
 *  A node object.
 *
 * @return
 *  The HTML code for the image editor is returned.
 */
function lnt_image_editor(&$node) {
  
  $result = db_query('select f.filepath from {content_type_lnt_image} c, {files} f where c.field_lnt_image_fid = f.fid and c.nid = %d', $node->nid);
  $filepath = db_fetch_object($result)->filepath;
  
//  $img_dim = get_lnt_image_dimensions($filepath);
//  $img_dim['width'] = 955; //$img_dim['height'] = 540;
//  $img_dim['height'] = $img_dim['height'] + 200; //$img_dim['height'] = $img_dim['height'] + 100; //original height adjustment  
  $width = 955;
  $height = 800;
  
  $language = reset(taxonomy_node_get_terms_by_vocabulary($node, 1));
  $languageName = drupal_strtolower($language->name);
  //$fontFamily = variable_get("font-$languageName", "Gentium, DejaVu");
  if ($languageName == 'lakota') {
    $fontFamily = 'Lakhota Gmigmeya'; }
  else if ($languageName == 'english') {
    $fontFamily = 'Arial'; }
  else {
    $fontFamily = 'Gentium, DejaVu'; }  
    
  $embed_code = theme('lat_image_editor_embed_code', $node, $width, $height, null);
  return $embed_code;
  
}

/**
 * Acceps a node object.
 *
 * @param $node
 *  A node object.
 *
 * @return
 *  The lnt_order_terms_form form is returned.
 */
function lnt_order_terms_page($node) { 
  return drupal_get_form('lnt_order_terms_form', $node); 
}

/**
 * Accepts data to print and a boolean to determine if we
 * are using print_r
 *
 * @param $data
 *  The data to print.
 *
 * @param $use_print_r
 *  TRUE if using print_r to print data.
 */
function lnt_verbose($data, $use_print_r = false) {

  if ($GLOBALS['user']->uid != 1) 
    return;

  if ($use_print_r == false) {
    drupal_set_message('<pre>'.htmlentities($data).'</pre>');
  } else {
    drupal_set_message('<pre>'.htmlentities(print_r($data,true)).'</pre>');
  }

}



/**
 * Returns a lnt_image node.
 *
 * @return
 *  A lnt_image node is returned.
 */
function lnt_openfile() {
  //watchdog('latimage', 'PROCESSING OPEN FILE COMMAND');
  
  drupal_set_header('Content-Type: text/plain');
  $nid = $_REQUEST['nid'];
  $node = node_load($nid);  
  // $width = $_REQUEST['width'];
  // $height = $_REQUEST['height'];
  
  // POST-PROCESSING XML
  $xmldata = $node->field_lnt_image_xml[0]['value'];
  //$xmldata = str_replace('dev.liveandtell.com', 'liveandtell.com', $xmldata);

  // Set actual image name
  // MAY NOT BE COMPATIBLE WITH FUTURE MODIFICATIONS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  // $img_filepath = $node->field_lnt_image[0]['filepath'];
  // $img_filename = lnt_strip_image_path($img_filepath);
  // $img_url = lnt_get_image_url($img_filename, $width, $height, $node->type);
  $node_image_nid = $node->field_abstract_image_noderef[0]['nid'];
  $node_image = node_load($node_image_nid);
  $img_url = $node_image->lat_media_url;
  $xmldata = preg_replace('/image url=".*?"/', 'image url="'.$img_url.'"', $xmldata);
  
  //lnt_verbose($img_url);
  //lnt_verbose($node, true);
  //lnt_verbose(base_path());
  //lnt_verbose(file_directory_path());
  
  // Replace term text with text from actual term
  // PREPARE XML DOCUMENT AND XPATH
  $xmldoc = new DOMDocument('1.0', 'UTF-8');
  $success = $xmldoc->loadXML($xmldata);
  if ($success) {
    //watchdog('latimage', 'Entering XML string.');
    
    $xpath = new DOMXPath($xmldoc);
    $button_elements = $xpath->query('//button|//circle|//rectangle|//square');
    if ($button_elements) {
      foreach($button_elements as $button) {
        //watchdog('latimage', 'Processing a button.');
        
        // Find the Term NID
        $term_nid = $button->getAttribute('termNID');
        if ($term_nid){
          // Continue as normal. Term NID was found.
        } 
        else {
          
          // Figure out the Term NID.
          $button_id = $button->getAttribute('id');
          if ($button_id) {
            $term_nid = db_result(db_query( <<<EOS
              select 
                n.nid 
              from 
                {node} n
                inner join {content_type_lnt_term} c on n.nid = c.nid
                inner join {content_field_lnt_image_noderef} fr on n.nid = fr.nid
              where
                fr.field_lnt_image_noderef_nid = $node->nid
                and c.field_lnt_image_element_id_value = $button_id
EOS
            ));
          }
          else {
            //watchdog('latimage', 'ERROR: Button ID not found in XML element.');
          }
          
          //watchdog('latimage', 'Finished processing a button.');
        }
        
        // Load the term
        if ($term_nid) {
          //watchdog('latimage', "Term NID found: $term_nid");
          $term_node = node_load($term_nid);
          if ($term_node) {
            $button_text = $term_node->field_entry_text[0]['value'];
            $button->setAttribute('text', $button_text);
            //watchdog('latimage', "Button text is $button_text.");
          }
          else {
            drupal_set_message('Failed to load node.', 'warning');
            //watchdog('latimage', "Failed to load node $term_nid.");
          }
        }
        else {
          drupal_set_message('Term NID missing for button element.', 'warning');
          //watchdog('latimage', "Term NID $term_nid missing for button element.");
        }
        
      } // end foreach
      
      $xmldata = $xmldoc->saveXML();
      //watchdog('latimage', 'Leaving XML string.');
      
    }
    else {
      // XPATH returned no results.
      //watchdog('latimage', 'ERROR: XPATH result is empty.');
    }
  }
  else {
    // Problems loading XML document.
    //watchdog('latimage', 'ERROR: Problems loading XML string.');
  }

  //
  // Get font-family
  //

  $rset = db_query(
    "select pv.value "
    ."from {profile_fields} pf, {profile_values} pv "
    ."where pf.fid = pv.fid and pf.name = 'profile_font_family' and pv.uid = %d ",
    $node->uid
  );
  $font_family = db_result($rset);
  // 1. REMOVE any existing "fontFamily" attributes
  // 2. INSERT new "fontFamily" attributes
  $xmldata = preg_replace('/fontFamily=".*?"/', '', $xmldata);
  $xmldata = str_replace('<button ', '<button fontFamily="'.$font_family.'" ', $xmldata);

  // How did this end up trimmed to just 'echo $xmldata'?
  // The server needs to send a 'success=true', just like savefile does
  echo $xmldata;
  
  //watchdog('latimage', 'OPEN FILE COMMAND FINISHED');
  module_invoke_all('exit');
  exit;
}



/**
 * Saves a lnt_image node.
 */

function lnt_savefile() {
  $verbose = '';
  //watchdog('latimage', 'PROCESSING SAVEFILE COMMAND');
  
  //Print header
  drupal_set_header('Content-Type: text/xml');
  echo '<?xml version="1.0" ?' . '>';


  //
  // UPDATE IMAGE NODE
  //

  //Get NODE and HTTP data
  $nodeNID = $_REQUEST['nid'];
  if ($nodeNID) {
    
    $verbose .= 'NID:'.$nodeNID;
    $node = node_load($nodeNID);
    if ($node) {
        
      // Don't update title anymore
      //if ($_REQUEST['title']) {
      //  $node->title = urldecode($_REQUEST['title']);
      //}
    
      //GET NEW XML-DATA
      if ($_REQUEST['content']) {
        
        $xmldata = urldecode($_REQUEST['content']);
    
        //STORE NEW XML-DATA
        $node->field_lnt_image_xml[0]['value'] = $xmldata;
      
        //Save node
        if ($node && $node->nid) {
          node_save($node);
        }
      
        //TODO: THIS PART NEEDS EXCEPTION HANDLING
        $verbose .= lnt_image_update_terms($node);
        
      }
      else {
        $verbose .= 'XML content not provided.';
      }
      

    }
    else {
      $verbose .= 'Node was not loaded.';
    }
  }
  else {
    $verbose .= 'Node NID not provided.';
  }
    
  //
  // RETURN RESULT
  //

  echo <<<EOS
  <result success="true" id="$node->nid" >
  <verbose>
    $verbose
  </verbose>
  </result>
EOS;

  //watchdog('latimage', 'Savefile results: [' . dpr($verbose, TRUE) . ']');
  //watchdog('latimage', 'SAVEFILE COMMAND FINISHED');
  
  module_invoke_all('exit');
  exit;
}



/**
 * Accepts an lnt_image node reference and updates the terms
 *  associated with that lnt_image node.
 *
 * @param $node
 *  An lnt_image node object.
 *
 * @return
 *  The verbose output of the function for debugging purpose.
 */
function lnt_image_update_terms(&$node) {
  
  //watchdog('latimage', 'Begin saving terms.');
  $verbose = '';
  
  // PREPARE TERM IDS
  // PREPARE XML DOCUMENT AND XPATH
  $xmldoc = new DOMDocument('1.0', 'UTF-8');
  $success = $xmldoc->loadXML($node->field_lnt_image_xml[0]['value']);
  if ($success) {
    //watchdog('latimage', "Entering XML string.");
    
    // GET XMLDATA ID's AND TEXT FOR SAVING
    $xpath = new DOMXPath($xmldoc);
    $button_list = $xpath->query('//button|//circle|//rectangle|//square');
    if ($button_list) {
      //watchdog('latimage', "Entering button list.");

      // GET THE NEW IDS AND TERMS
      $new_id_list = array();
      $new_term_list = array();
      foreach($button_list as $button) {
        $new_id_list[] = $button->getAttribute('id');
        $new_term_list[] = $button->getAttribute('text');
      }
      // Set empty text to "(blank)"
      foreach ($new_term_list as $term_index => $term_text) {
        if ($term_text == "") {
          $new_term_list[$term_index] = "(blank)";
        }
      }
      //watchdog('latimage', 'New term IDs ' . count($new_term_list) . ' Terms: ' . count($new_id_list));
      $verbose .= print_r('New term IDs ' . count($new_term_list) . ' Terms: ' . count($new_id_list) . "\n", TRUE);
    
      // GET THE OLD IDS & TERMS
      $query = <<<EOS
        select 
          c.field_lnt_image_element_id_value as attrib_id, 
          n.title,
          c.nid 
        from
          {node} n
          inner join {content_type_lnt_term} c on c.nid = n.nid
          inner join {content_field_lnt_image_noderef} fr on fr.nid = n.nid 
        where 
          n.type = 'lnt_term'
          and fr.field_lnt_image_noderef_nid = %d
        order by 
          c.field_lnt_image_element_id_value asc
EOS;
      $rset = db_query($query, $node->nid);
      $old_id_list = array();
      while($row = db_fetch_object($rset)) {
        if ($row->attrib_id !== NULL) {
          $old_id_list[] = $row->attrib_id;
          $old_term_list[] = $row->title;
          $old_term_nid_list[] = $row->nid;
        }
        else {
          // Skipping f***ed up term.
          // TODO: DELETE THE F***ED UP TERMS.
        }
      }
      //watchdog('latimage', 'Old term IDs ' . count($old_term_list) . ' Terms: ' . count($old_id_list));
      $verbose .= print_r('Old term IDs ' . count($old_term_list) . ' Terms: ' . count($old_id_list) . "\n", TRUE);
      
      //
      // UPDATE THE NEW AND THE OLD
      // COMPARE OLD AND NEW ID'S
      //
      // E.G. 
      // OLD: 1 2 3 5 6
      // NEW: 2 4 6 7 8 9
      //
      // OLD: 1 2 3   5 6
      // NEW:   2   4   6 7 8 9
      //
      // STEPS:  
      // OLD  NEW  ACTION
      // ----------------
      // 1    2    DELETE 1
      // 2    2    UPDATE 2
      // 3    4    DELETE 3
      // 5    4    INSERT 4
      // 5    6    DELETE 5
      // 6    6    UPDATE 6
      // 
      // Add 7, 8, 9  
      //
      
      // SORT THE NEW AND OLD "ID" LISTS, FOR COMPARISON PURPOSES      
      // Sort terms by ID, Text for comparison purposes
      if (count($new_id_list) > 1 ) {
        array_multisort($new_id_list, $new_term_list);
      }
      if (count($old_id_list) > 1) {
        array_multisort($old_id_list, $old_term_nid_list); 
      }
      
      $old_index = 0;
      $old_count = count($old_id_list);
      $new_index = 0;
      $new_count = count($new_id_list);
      $account = user_load($node->uid);
      while ($old_index < $old_count && $new_index < $new_count) {
      
        $old_term_nid = $old_term_nid_list[$old_index];
        $old_id = $old_id_list[$old_index];
        $new_id = $new_id_list[$new_index];
            
        // DELETE OLD TERM (THE ID'S NOT IN THE LIST OF ID'S TO BE SAVED)
        if ($old_id < $new_id) {
          //watchdog('latimage', 'Deleting old term.');
          $verbose .= "\nDeleting an old term.";
          node_delete($old_term_nid);
          $old_index++;
        }
        
        // UPDATE TERM
        else if ($old_id == $new_id) {
          //watchdog('latimage', 'Updating an old term.');
          $verbose .= "\nUpdating an old term with the new term.";
          $term_node = node_load($old_term_nid);
          if ($term_node) {
            $term_node->title = $new_term_list[$new_index];
            $term_node->field_entry_text[0]['value'] = $new_term_list[$new_index];
            $term_node->status = $node->status;                           // propogate status MAYBE HANDLE BY "RELATIONSHIPS" MODULE
            if ($term_node->nid && !empty($term_node->title)) {
              node_save($term_node);
              //watchdog('latimage', 'Updating old term FINISHED.');
            }
            else {
              drupal_set_message('ERROR: There is a problem with saving the image tags, when UPDATING tags.', 'error');
              //watchdog('lnt_images', 'There is a problem with saving the image tags, when UPDATING tags.', NULL, WATCHDOG_ERROR);
            }
          }
          else {
            //watchdog('lnt_images', "ERROR: Term node [nid:$old_term_nid] could not be loaded.", NULL, WATCHDOG_ERROR);
          }
          $old_index++;
          $new_index++;
        }
        
        // ADD A NEW TERM
        else if ($new_id < $old_id) {
          watchdog('latimage', 'Adding a new term.');
          $verbose .= "\nAdding a new term.";
          $curr_term = $new_id;
          $new_term = $new_term_list[$new_index];
          $new_id = $new_id_list[$new_index];
          if (!empty($new_id)) {
            insert_lnt_term($account, $node, $new_term, $new_id);
          }
          else {
            drupal_set_message('There is a problem with saving the image tags, when ADDING NEW tags.', 'error');
            //watchdog('lnt_images', 'There is a problem with saving the image tags, when ADDING NEW tags.', NULL, WATCHDOG_ERROR);
          }
          $new_index++;
        }
        
      } // end while
      
      // REMOVE ANY REMAINING OLD TERMS
      while ($old_index < $old_count) {
        //watchdog('latimage', 'Removing remaining term.');
        $old_term_nid = $old_term_nid_list[$old_index];
        $old_id = $old_id_list[$old_index];
        $verbose .= "\nDeleting old term [nid:$old_term_nid].";
        node_delete($old_term_nid);
        $old_index++;
      }
      
      // ADD ANY REMAINING NEW TERMS
      while ($new_index < $new_count) {
        //watchdog('latimage', 'Adding remaining term.');
        $verbose .= "\nAdding a new term.";
        $new_term = $new_term_list[$new_index];
        $new_id = $new_id_list[$new_index];
        if (!empty($new_id)) {
          insert_lnt_term($account, $node, $new_term, $new_id);
        }
        else {
          drupal_set_message('There is a problem with saving the image tags, when ADDING REMAINING tags.', 'error');
          //watchdog('lnt_images', 'ERROR: There is a problem with saving the image tags, when ADDING REMAINING tags.', NULL, WATCHDOG_ERROR);
        }
        $new_index++;
      }

      //watchdog('latimage', 'Exiting button list.');
      return $verbose;
    }
    else { 
      return 'no buttons'; 
    }
    
    //watchdog('latimage', "Exiting XML terms.");
  }
  else {
    return 'problems loading XML document';
  }
  
  //watchdog('latimage', "End saving terms.");
  
}



/**
 * Accepts a user reference, an lnt_image node reference, a title, and a term id.
 * Inserts a term into the lnt_image node.
 *
 * @param $user
 *  A reference to the user.
 *
 * @param $lnt_image_node
 *  A reference to the lnt_image node.
 *
 * @param $title
 *  The node title.
 *
 * @param $term_id
 *  The term id to instert.
 */
function insert_lnt_term(&$account, &$lnt_image_node, $title, $term_id) {

    // PREPARE NODES
    $term = array();
    $term = _lat_node_initialize('lnt_term');
    $term->title = $title;
    $term->field_entry_text[0]['value'] = $title;
    $term->uid = $account->uid; 
    $term->name = $account->name;
    $term->status = $lnt_image_node->status;  // propogate status MAYBE HANDLE BY "RELATIONSHIPS" MODULE
    $term->field_lnt_image_element_id[0]['value'] = $term_id;
    $term->field_lnt_image_noderef[0]['nid'] = $lnt_image_node->nid;

    // SAVE NODE
    node_save($term);
//    watchdog('lnt_images', dpr($term, TRUE), NULL, WATCHDOG_INFO);
    
}
