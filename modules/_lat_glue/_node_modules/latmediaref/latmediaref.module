<?php

function latmediaref_init() {
  // Remote image search:
  // To put this in it's own hook_preprocess_page,
  // then a separate module would need to be created.
  $path = drupal_get_path('module', 'latmediaref');
  drupal_add_css("$path/remote-image-search/css/websearch-results.css");
  drupal_add_js ("$path/remote-image-search/js/functions.js");
  drupal_add_js ("$path/remote-image-search/js/driver.js");
  //  Something to consider:
  //  drupal_add_js ("$path/image-search-remote/js/jquery-1.5.1.min.js");
  //  var latJQ = $.noConflict(true); 
  //  latJQ('#selection').function();
  //  alert(jQuery.fn.jquery);
}

function latmediaref_menu() {
  $items = array(
    'node/cache/media_reference' => array(
      'title' => 'Add pictures from Web',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('latmediaref_websearchform'),
      'access callback' => 'node_access',
      'access arguments' => array('create', 2),
    ),
  );
  return $items;
}

function latmediaref_theme($existing, $type, $theme, $path) {
  return array(
    'remote_image_search' => array(
      'arguments' => array(),
      'path' => "$path/remote-image-search/theme",
      'file' => 'theme',
      'template' => 'remote-image-search-page',
      'theme paths' => array(
         "$path/remote-image-search/theme"
      ),
    )
  );
}

function latmediaref_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'media_reference') {
    switch($op) {
      case 'load':
        
        // Get flickr image url
        $handler = $node->field_media_handler[0]['value'];
        $request = $node->field_media_reference[0]['value'];
        $media_data = latservice_handler_process_request($handler, $request);
        
        // Prepare credit
        $media_owner = $media_data['owner'];
        $node->lat_media_credit = 'Picture credit: ' . $media_owner[realname];
        if ($media_owner['location']) {
          $node->lat_media_credit .= ', ' . $media_owner['location'];
        } 
        $date_posted = $media_data['dates']['posted'];
        $node->lat_media_credit .= ', posted ' . date('F Y', $date_posted);
        $node->lat_media_credit .= '.';
        
        // Medium size URL
        $node->lat_media_url = flickr_photo_img($media_data, 'z');
        $node->lat_media_width = 640;
        $node->lat_media_height = 640;
        
        // Thumb size URL
        $node->lat_media_thumb_url = flickr_photo_img($media_data, 't');
        $node->lat_media_thumb_width = 100;
        $node->lat_media_thumb_height = 100;
        break;
        
      case 'view':
        $handler = $node->field_media_handler[0]['value'];
        $handler_data = $node->field_media_reference[0]['value'];
        $content = theme('latmediaref', $handler, $handler_data);
        $node->content [] = array(
          '#type' => 'markup',
          '#value' => $content,
        );
        break;
      default:
        break;
    }
  }
}

function latmediaref_websearchform(&$form_state) {
  $form = array();

  // Initialize the state, if it doesn't exist.
  if (empty($form_state['storage']['state'])) {
    $state = 'display_form';
    $form_state['storage']['state'] = $state;
  }
  else {
    $state = $form_state['storage']['state'];
  }

  // SEARCH FORM
  // Display submission form
  if ($state == 'display_form' || $state == 'display_results') {
    $form['search-form'] = array(
      '#prefix' => '<div class="image-search-form">',
      '#suffix' => '</div>',
    );
    $form['search-form']['keywords'] = array(
      '#type' => 'textfield',
      '#title' => 'Flickr photo search',
      '#description' =>
        "These photos have an \"attribution\" license. You can use the photos,
        <br />but you should give credit to the owner. The LiveAndTell website
        <br />will attempt to conform to the attribution requirement.",
    );
    if (isset($form_state['values']['keywords'])) {
      $form['search-form']['keywords']['#default_value'] = $form_state['values']['keywords'];
    }
    $form['search-form']['submit-keywords'] = array(
      '#type' => 'submit',
      '#value' => 'Search',
    );
  }

  // RESULTS FORM
  // Display results
  if ($state == 'display_results') {
    if (isset($form_state['values']['keywords'])) {

      $query = array();
      $query['method'] = 'flickr.photos.search';
      $flickr_api_key = variable_get('flickr_api_key', NULL);
      $is_valid_key = is_string($flickr_api_key) && strlen($flickr_api_key) == 32; 
      if ($is_valid_key) {
        $query['api_key'] = $flickr_api_key;
        $query['license'] = 4;
        $query['media'] = 'photos';
        $query['text'] = $form_state['values']['keywords'];
        $query['format'] = 'json';
        $query['extras'] = 'license,url_t,url_l';
        $query['per_page'] = 16;
        $flickr_url = 'http://api.flickr.com/services/rest/';
        $flickr_url = url($flickr_url, array('query' => $query));
        $results = lat_curl_jsonp($flickr_url, 'jsoncallback');
//        dpm($results);
        $flickr_items = $results->photos->photo;
      }

//      $flickr_results = _lat_imagesources_search_flickr($form_state['values']['keywords'], 'php_serial');
//      $flickr_results = unserialize($flickr_results);
//      $flickr_items = $flickr_results['items'];
      
      if (!empty($flickr_items)) {
        $form_state['storage']['image_data'] = $flickr_items;
        $form['#prefix'] = '<div id="websearch-results">';
        $form['#suffix'] = '</div>';
        foreach ($flickr_items as $image_index => $image_data) {
          $form['images'][]= array(
            '#prefix' => '<div class="ui-widget-content ui-selectable">',
            'image' => array(
              '#prefix' => '<div class="image-result">',
              '#type' => 'markup',
              '#value' => theme('image', $image_data->url_t, '', '', array(), FALSE),
              '#suffix' => '</div>',
            ),
            $image_index => array(
              '#type' => 'checkbox',
            ),
            '#suffix' => '</div>',
          );
        }
        $form['submit-images'] = array(
          '#type' => 'submit',
          '#value' => 'Use these images',
        );
      }
      else {
        $form []= array(
          '#type' => 'markup',
          '#value' => t('Your search did not match any images.'),
        );
      } // end flickr results
      
    }
    else {
      // Do nothing, tags not available
    }
    
  } // end search terms

  // Return form
  return $form;
}

function latmediaref_websearchform_submit($form, &$form_state) {
  // Adjust the state
  $state = $form_state['storage']['state'];
  $submit_button = $form_state['clicked_button']['#id'];
  if ($submit_button == 'edit-submit-keywords') {
    $state = 'display_results';
  }
  else if ($submit_button == 'edit-submit-images') {
    $state = 'process_results';
  }
  else {
    $state = 'display_form';
  }
  
  // SAVE CHOSEN IMAGES
  // Process results
  if ($state == 'process_results') {
    
    // Find chosen images
    $image_data = $form_state['storage']['image_data'];
    $image_mask = array_intersect_key($form_state['values'], $image_data);
    foreach ($image_mask as $index => $display_bit) {
      if ($display_bit == 1) {
        $selected_images []= $image_data[$index];
      }
    }

    // Save the images as a file & "image" node.
    foreach ($selected_images as $image_info) {

//      dpm($image_info);
      $image_id = $image_info->id;
      $image_url = $image_info->url_l;
      $node = _lat_node_initialize('media_reference');
      $node->title = 'image';
      $node->uid = $GLOBALS['user']->uid;
      $node->name = $GLOBALS['user']->name;
      $node->field_media_handler[0]['value'] = 'http://api.flickr.com/services/rest/';
      $node->field_media_reference[0]['value'] 
        = 'method=flickr.photos.getInfo&photo_id='.$image_id;
      node_save($node);
    }
    
    // Update the state
    $state = 'display_form';
    $user = $GLOBALS['user'];
    drupal_goto("user/$user->uid/notebooks/images/add-items");
    
  } // end process results
  
  $form_state['storage']['state'] = $state; 
}

/*
function latmediaref_views_api() {
  return array(
    'api' => 2, // Use version 2
  );
}
*/
