//
//                      +------+------+
//                      | Prev | Next |
//  +----------------+--+------+------+
//  |  +----------+  |  +----------+  |
//  |  |          |  |  |          |  |
//  |  |  Tagged  |  |  |  Tagged  |  |
//  |  |  Image   |  |  |  Image   |  |
//  |  |          |  |  |          |  |
//  |  +----------+  |  +----------+  |
//  |                |                |                            
//  |  Writing [>]   |  Writing [>]   |
//  |  Writing [>]   |  Writing [>]   |
//  |                |                |                            
//  +----------------+----------------+
//


/*****************************************************************************
 * LAT APP - STORYBOOK CLASS 
 ****************************************************************************/
function LatAppBook(container) {

  // Set the container HTML that this app resides inside.
  this.container = container;
  
  // Instantiate content variables
  this.content = $('<div class="lat-app-object-book"></div>');
  
  this.uiControls = $('<div class="controls"></div>');
  this.btnPrevious = $('<a class="control button-previous" href="#">Previous</a>');
  this.btnNext = $('<a class="control button-next" href="#">Next</a>');
  this.boundPages = $('<table class="book-pages"></table>');
  this.binding = $('<tr></tr>');
  this.boundPageLeft = $('<td class="book-page book-page-left">LEFT</td>');
  this.boundPageRight= $('<td class="book-page book-page-right">RIGHT</td>');

  // Left page binder holds pages to the left of the book.
  this.pageLeftBinder = new Array();

  // Left page
  var image = '<div>[no image]</div>';
  var writing = '<div>empty</div>';
  this.pageLeft = new LatAppStorybookPage(image, writing);  // Create an empty page
  this.pageLeft.container = this.boundPageLeft;             // Assign to HTML 
  this.pageLeft.updateDisplay();                            // Update display
  
  // Right page
  this.pageRight = new LatAppStorybookPage(image, writing); // Create an empty page
  this.pageRight.container = this.boundPageRight;           // Assign to HTML
  this.pageRight.updateDisplay();                           // Update display

  // Right page binder holds pages to the right of the book.
  this.pageRightBinder = new Array();
  
  // Add event handlers
  var book = this;
  this.btnPrevious.click(function(event){
    event.preventDefault();
    book.pageTurnLeft();
  });
  this.btnNext.click(function(event){
    event.preventDefault();
    book.pageTurnRight();
  });
  
  // Combine the content variables
  this.content
  // Controls
  .append(
    this.uiControls 
    .append(this.btnPrevious)
    .append(this.btnNext)
  )
  // Pages
  .append(
    this.boundPages
    .append(
      this.binding
      .append(this.boundPageLeft)
      .append(this.boundPageRight)
    )
  );

}

// Update display
LatAppBook.prototype.updateDisplay = function() {
  this.container.empty();
  this.container.append(this.themeDefault());
};

// Theme default
LatAppBook.prototype.themeDefault = function() {
  return this.content;
};

// Turn the page left
LatAppBook.prototype.pageTurnLeft = function() {
  if (this.pageLeftBinder.length > 1) {
    
    // Left page to far right
    this.pageRightBinder.push(this.pageRight);      // Move page off to the right
    var left1 = this.pageLeftBinder.pop();
    this.pageRight = new LatAppStorybookPage(left1.image, left1.writing);
    this.pageRight.container = this.boundPageRight; // direct variable access is bad practice
    this.pageRight.updateDisplay();
    
    // Left page to right
    this.pageRightBinder.push(this.pageLeft);       // Move page off to the right
    var left2 = this.pageLeftBinder.pop();
    this.pageLeft = new LatAppStorybookPage(left2.image, left2.writing);
    this.pageLeft.container = this.boundPageLeft;   // direct variable access is bad practice
    this.pageLeft.updateDisplay();
    
  }
  else {
    // alert('There are no pages to turn on the left.');
  }
};

// Turn the page right
LatAppBook.prototype.pageTurnRight = function() {
  if (this.pageRightBinder.length > 1) {
    
    // Right right pages to far left
    this.pageLeftBinder.push(this.pageLeft);
    var right1 = this.pageRightBinder.pop();
    this.pageLeft = new LatAppStorybookPage(right1.image, right1.writing);
    this.pageLeft.container = this.boundPageLeft;
    this.pageLeft.updateDisplay();
    
    // Turn right pages to right side
    this.pageLeftBinder.push(this.pageRight);
    var right2 = this.pageRightBinder.pop();
    this.pageRight = new LatAppStorybookPage(right2.image, right2.writing);
    this.pageRight.container = this.boundPageRight;
    this.pageRight.updateDisplay();

  }
  else {
    // alert('There are no pages to turn on the right.');
  }
};

/*****************************************************************************
 * PAGE CLASS 
 ****************************************************************************/

function LatAppStorybookPage(image, writing) {
  
  this.container = null;
  this.content = $('<div class="storybook-page"></div>');
  
  this.image = image;
  this.writing = writing;
  
  this.content
    .append(this.image)
    .append(this.writing);
  
}

// Member functions
LatAppStorybookPage.prototype.updateDisplay = function() {
    this.container.empty();
    this.container.append(this.themeDefault());
};
LatAppStorybookPage.prototype.themeDefault = function() {
  return this.content;
};
