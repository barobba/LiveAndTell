<?php
// $Id$

/**
 * @file
 * Adds the embed code to the lnt_term node type.
 *
 * When enabled, the Drupal lnt_term module adds the embed code
 * to the lnt_term node type.
 */
 
/**
 * Implementation of hook_nodeapi(). 
 */
function lnt_term_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  
  if ($node->type == 'lnt_term') {
    
    switch ($op) {
      
      case 'update':
        // Commented out because propogation is unnecessary.
        // Term content should remain with the term ONLY.
        // _lnt_term_node_update($node);
        break;
        
      case 'delete':
        // Commented out because propogation is unnecessary
        // If Shape String (XML) is stored elsewhere, 
        // and an API was created for modifying the data,
        // then it might be helpful to sync removal of terms. 
        //_lnt_term_node_delete($node);
        break;
        
      case 'view':
        $teaser = $a3;
        $page = $a4;
        _lnt_term_node_view($node, $teaser, $page);
        break;
        
    } // end switch
    
  } // end if
  
}


function _lnt_term_node_update(&$node) {
  
  /*

  // INITIALIZE PARENT NID & XML
  $parent_nid = $node->field_lnt_image_noderef[0]['nid'];
  $parent_xml = latimage_xml_load($parent_nid);
  
  if ($parent_xml != FALSE) {

    // INITIALIZE XML DOCUMENT
    $xmldoc = new DOMDocument('1.0', 'UTF-8');
    $xmldoc->preserveWhiteSpace = FALSE;
    
    // LOAD XML FROM NODE FIELD
    $xml_load_success = $xmldoc->loadXML($parent_xml);
    
    if ($xml_load_success) {
      
      // INITIALIZE XPATH
      $xpath = new DOMXPath($xmldoc);
      
      // QUERY ELEMENTS
      $elemid = $node->field_lnt_image_element_id[0]['value'];
      $term_elements = $xpath->query("//square[@id='$elemid']|//button[@id='$elemid']|//circle[@id='$elemid']|//rectangle[@id='$elemid']");
      
      if ($term_elements) {

        // HANDLE UPDATE CASE
        foreach ($term_elements as $term_element) {
          if ($term_element->getAttribute('text') != $node->title) {
            // Update the term in the XML data, only if term has changed.
            $term_element->setAttribute('text', $node->title);
            $result = latimage_xml_save($parent_nid, $xmldoc->saveXML());
            if ($result != FALSE) {
              // Do nothing. Update was successful.
            } else {
              watchdog('latterm', 'Save failed'); 
              return false;
            }
          } 
          else {
            // Do nothing. The term has not changed.
          }
        } // end foreach
        
        cache_clear_all("content:$parent_nid:", 'cache_content', TRUE);        
        return true;
      } 
      else {
        watchdog('latterm', 'Term elements are missing'); 
        return false;
      }
      
    } 
    else { 
      watchdog ('latterm', 'Problems loading XML document'); 
      return false;
    }
  } 
  else {  
    watchdog ('latterm', 'Parent image does not exist'); 
    return false;
  }
  */
}

function _lnt_term_node_delete(&$node) {
  
  /*

  // INITIALIZE PARENT NID & XML VARIABLES
  $parent_nid = $node->field_lnt_image_noderef[0]['nid'];
  $parent_xml = latimage_xml_load($parent_nid);
  
  if ($parent_xml != FALSE) {

    // INITIALIZE XML DOCUMENT
    $xmldoc = new DOMDocument('1.0', 'UTF-8');
    $xmldoc->preserveWhiteSpace = FALSE;
    
    // LOAD XML FROM NODE FIELD
    $xml_load_success = $xmldoc->loadXML($parent_xml);
    
    if ($xml_load_success) {
      
      // INITIALIZE XPATH
      $xpath = new DOMXPath($xmldoc);
      
      // QUERY ELEMENTS
      $elemid = $node->field_lnt_image_element_id[0]['value'];
      $term_elements = $xpath->query("//square[@id='$elemid']|//button[@id='$elemid']|//circle[@id='$elemid']|//rectangle[@id='$elemid']");
      
      if ($term_elements) {

        foreach ($term_elements as $term_element) {
          // ONE ITERATION EXPECTED (I.E. SINGLE ELEMENT) 
          // Delete this term from the XML data
          $term_element->parentNode->removeChild($term_element);
          $result = latimage_xml_save($parent_nid, $xmldoc->saveXML());
          if ($result != FALSE) {
            // Do nothing. Update was successful.
          } else {
            watchdog('latterm', 'Save failed'); 
            return false;
          }
        } // end foreach
        
        cache_clear_all("content:$parent_nid:", 'cache_content', TRUE);        
        return true;
        
      } 
      else {
        watchdog('latterm', 'Term elements are missing'); 
        return false;
      }
    } 
    else { 
      watchdog ('latterm', 'Problems loading XML document'); 
      return false;
    }
  } 
  else {  
    watchdog ('latterm', 'Parent image does not exist'); 
    return false;
  }
  
  */
}

function _lnt_term_node_view(&$node, $teaser, $page) {
  
  $content = '';
  
  // Get image dimensions.
  $host = $_SERVER['HTTP_HOST'];
  $tagging_node = node_load($node->field_lnt_image_noderef[0]['nid']);
  $image_node = node_load($tags->field_abstract_image_noderef[0]['nid']);
  $width = $image_node->lat_media_width;
  $height = $image_node->lat_media_height;

  // Prepare embed code.
  //drupal_set_message('<pre>'.print_r($node,true).'</pre>');
  $element_id = $node->field_lnt_image_element_id[0]['value']; 
  $embed_code =<<<EOS
    <object width="$width" height="$height">
      <param 
        name="movie" 
        value="http://$host/v/$tagging_node->nid?boxes=$element_id"
      ></param>
      <param name="allowFullScreen" value="true"></param>
      <embed 
        src="http://$host/v/$tagging_node->nid?boxes=$element_id" 
        type="application/x-shockwave-flash" 
        allowfullscreen="true" 
        width="$width" 
        height="$height"
      ></embed>
    </object>
EOS;

  $content .= $embed_code;
  $content .= '<p>' . l('Click here to view all terms', "node/$tagging_node->nid").'</p>';
  
  // Show embed code.
  $node->content['embed_code'] = array(
    '#type' => 'fieldset',
    '#title' => '<b>Embed Code</b>',
    '#value' => htmlentities($embed_code),
    '#collapsible' => false,
    '#collapsed' => false,
    '#weight' => 6
  );

  // Create 'view all terms' link.
  $node->content[] = array(
    '#value' => $content,
    '#weight' => 5
  );
}

function latimage_xml_load($nid) {

  $query = <<<EOS
    select
      m.field_lnt_image_xml_value 
    from 
      {content_type_lnt_image} m
    where
      m.nid = %d
    limit 1
EOS;
  $db_rset = db_query($query, $nid);
  if ($db_rset != FALSE) {
    $xml = db_result($db_rset);
    return $xml;
  }
  else {
    return FALSE;
  }
  
}

function latimage_xml_save($nid, $xml) {
  
  $update_xml_sql = <<<EOS
    update
      {content_type_lnt_image} m
    set
      m.field_lnt_image_xml_value = '%s'
    where
      m.nid = %d
EOS;
  return db_query($update_xml_sql, $xml, $nid);                  
  
}
